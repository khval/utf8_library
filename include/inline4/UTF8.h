#ifndef INLINE4_UTF8_H
#define INLINE4_UTF8_H

/*
** This file was auto generated by idltool 53.24.
**
** It provides compatibility to OS3 style library
** calls by substituting functions.
**
** Do not edit manually.
*/ 

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef LIBRARIES_UTF8_H
#include <libraries/UTF8.h>
#endif
#include <interfaces/UTF8.h>

/* Inline macros for Interface "main" */
#define CaseCmp(UTF8_alphabet, UTF8_one, UTF8_two) IUTF8->CaseCmp((UTF8_alphabet), (UTF8_one), (UTF8_two))
#define Cmp(UTF8_alphabet, UTF8_one, UTF8_two) IUTF8->Cmp((UTF8_alphabet), (UTF8_one), (UTF8_two))
#define Decode(codeset_page, UTF8, flags) IUTF8->Decode((codeset_page), (UTF8), (flags))
#define DecodeLen(codeset_page, UTF8, len, flags) IUTF8->DecodeLen((codeset_page), (UTF8), (len), (flags))
#define Encode(codeset_page, ascii, flags) IUTF8->Encode((codeset_page), (ascii), (flags))
#define EstimateByteSize(glyph) IUTF8->EstimateByteSize((glyph))
#define FindGlyph(UTF8_alphabet, glyph) IUTF8->FindGlyph((UTF8_alphabet), (glyph))
#define GetGlyph(data, len) IUTF8->GetGlyph((data), (len))
#define GetGlyphAt(data, pos, len) IUTF8->GetGlyphAt((data), (pos), (len))
#define GetOffsetSize(UTF8, to_pos) IUTF8->GetOffsetSize((UTF8), (to_pos))
#define GetSize(UTF8) IUTF8->GetSize((UTF8))
#define IndexOf(UTF8, find) IUTF8->IndexOf((UTF8), (find))
#define Insert(UTF8, start, UTF8_insert, mem_flags) IUTF8->Insert((UTF8), (start), (UTF8_insert), (mem_flags))
#define Left(UTF8, len, mem_flags) IUTF8->Left((UTF8), (len), (mem_flags))
#define Length(UTF8) IUTF8->Length((UTF8))
#define Merge(mem_flags, ...) IUTF8->Merge((mem_flags), (...))
#define ModInsert(UTF8, start, UTF8_insert, mem_flags) IUTF8->ModInsert((UTF8), (start), (UTF8_insert), (mem_flags))
#define ModLeft(UTF8, len, mem_flags) IUTF8->ModLeft((UTF8), (len), (mem_flags))
#define ModRemove(UTF8, start, len, mem_flags) IUTF8->ModRemove((UTF8), (start), (len), (mem_flags))
#define ModRight(UTF8, len, mem_flags) IUTF8->ModRight((UTF8), (len), (mem_flags))
#define ModSubString(UTF8, start, len, mem_flags) IUTF8->ModSubString((UTF8), (start), (len), (mem_flags))
#define ModToLower(alphabet_UTF8, UTF8, mem_flags) IUTF8->ModToLower((alphabet_UTF8), (UTF8), (mem_flags))
#define ModToUpper(alphabet_UTF8, UTF8, mem_flags) IUTF8->ModToUpper((alphabet_UTF8), (UTF8), (mem_flags))
#define ModTrim(UTF8, mem_flags) IUTF8->ModTrim((UTF8), (mem_flags))
#define Printf(codeset_page, utf8_fmt, ...) IUTF8->Printf((codeset_page), (utf8_fmt), (...))
#define Remove(UTF8, start, len, mem_flags) IUTF8->Remove((UTF8), (start), (len), (mem_flags))
#define Right(UTF8, len, mem_flags) IUTF8->Right((UTF8), (len), (mem_flags))
#define SetGlyph(glyph, data) IUTF8->SetGlyph((glyph), (data))
#define SubString(UTF8, start, len, mem_flags) IUTF8->SubString((UTF8), (start), (len), (mem_flags))
#define ToLower(alphabet_UTF8, UTF8, mem_flags) IUTF8->ToLower((alphabet_UTF8), (UTF8), (mem_flags))
#define ToUpper(alphabet_UTF8, UTF8, mem_flags) IUTF8->ToUpper((alphabet_UTF8), (UTF8), (mem_flags))
#define Trim(UTF8, mem_flags) IUTF8->Trim((UTF8), (mem_flags))
#define TextUTF8Extent(ofont, font_size, UTF8, ext) IUTF8->TextUTF8Extent((ofont), (font_size), (UTF8), (ext))
#define TextUTF8ExtentN(ofont, font_size, UTF8, n, ext) IUTF8->TextUTF8ExtentN((ofont), (font_size), (UTF8), (n), (ext))
#define TextUTF8Length(ofont, font_size, UTF8) IUTF8->TextUTF8Length((ofont), (font_size), (UTF8))
#define TextUTF8LengthN(ofont, font_size, UTF8, n) IUTF8->TextUTF8LengthN((ofont), (font_size), (UTF8), (n))
#define TextUTF8(rp, ofont, font_size, xpos, ypos, UTF8) IUTF8->TextUTF8((rp), (ofont), (font_size), (xpos), (ypos), (UTF8))
#define TextUTF8N(rp, ofont, font_size, xpos, ypos, UTF8, n) IUTF8->TextUTF8N((rp), (ofont), (font_size), (xpos), (ypos), (UTF8), (n))
#define TextUTF32(rp, ofont, font_size, xpos, ypos, UTF32) IUTF8->TextUTF32((rp), (ofont), (font_size), (xpos), (ypos), (UTF32))

#endif /* INLINE4_UTF8_H */
