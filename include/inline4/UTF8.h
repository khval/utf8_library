#ifndef INLINE4_UTF8_H
#define INLINE4_UTF8_H

/*
** This file was auto generated by idltool 53.24.
**
** It provides compatibility to OS3 style library
** calls by substituting functions.
**
** Do not edit manually.
*/ 

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef LIBRARIES_UTF8_H
#include <libraries/UTF8.h>
#endif
#include <interfaces/UTF8.h>

/* Inline macros for Interface "main" */
#define UTF8CaseCmp(UTF8_alphabet, UTF8_one, UTF8_two) IUTF8->UTF8CaseCmp((UTF8_alphabet), (UTF8_one), (UTF8_two))
#define UTF8Cmp(UTF8_alphabet, UTF8_one, UTF8_two) IUTF8->UTF8Cmp((UTF8_alphabet), (UTF8_one), (UTF8_two))
#define UTF8Decode(codeset_page, UTF8, flags) IUTF8->UTF8Decode((codeset_page), (UTF8), (flags))
#define UTF8DecodeLen(codeset_page, UTF8, len, flags) IUTF8->UTF8DecodeLen((codeset_page), (UTF8), (len), (flags))
#define UTF8Encode(codeset_page, ascii, flags) IUTF8->UTF8Encode((codeset_page), (ascii), (flags))
#define UTF8EstimateByteSize(glyph) IUTF8->UTF8EstimateByteSize((glyph))
#define UTF8FindGlyph(UTF8_alphabet, glyph) IUTF8->UTF8FindGlyph((UTF8_alphabet), (glyph))
#define UTF8GetGlyph(UTF8, len) IUTF8->UTF8GetGlyph((UTF8), (len))
#define UTF8GetGlyphAt(UTF8, pos, len) IUTF8->UTF8GetGlyphAt((UTF8), (pos), (len))
#define UTF8GetOffsetSize(UTF8, to_pos) IUTF8->UTF8GetOffsetSize((UTF8), (to_pos))
#define UTF8GetSize(UTF8) IUTF8->UTF8GetSize((UTF8))
#define UTF8IndexOf(UTF8, find) IUTF8->UTF8IndexOf((UTF8), (find))
#define UTF8Insert(UTF8, start, UTF8_insert, mem_flags) IUTF8->UTF8Insert((UTF8), (start), (UTF8_insert), (mem_flags))
#define UTF8Left(UTF8, len, mem_flags) IUTF8->UTF8Left((UTF8), (len), (mem_flags))
#define UTF8Length(UTF8) IUTF8->UTF8Length((UTF8))
#define UTF8Merge(mem_flags, ...) IUTF8->UTF8Merge((mem_flags), (...))
#define UTF8ModInsert(UTF8, start, UTF8_insert, mem_flags) IUTF8->UTF8ModInsert((UTF8), (start), (UTF8_insert), (mem_flags))
#define UTF8ModLeft(UTF8, len, mem_flags) IUTF8->UTF8ModLeft((UTF8), (len), (mem_flags))
#define UTF8ModRemove(UTF8, start, len, mem_flags) IUTF8->UTF8ModRemove((UTF8), (start), (len), (mem_flags))
#define UTF8ModRight(UTF8, len, mem_flags) IUTF8->UTF8ModRight((UTF8), (len), (mem_flags))
#define UTF8ModSubString(UTF8, start, len, mem_flags) IUTF8->UTF8ModSubString((UTF8), (start), (len), (mem_flags))
#define UTF8ModToLower(alphabet_UTF8, UTF8, mem_flags) IUTF8->UTF8ModToLower((alphabet_UTF8), (UTF8), (mem_flags))
#define UTF8ModToUpper(alphabet_UTF8, UTF8, mem_flags) IUTF8->UTF8ModToUpper((alphabet_UTF8), (UTF8), (mem_flags))
#define UTF8ModTrim(UTF8, mem_flags) IUTF8->UTF8ModTrim((UTF8), (mem_flags))
#define UTF8Printf(codeset_page, utf8_fmt, ...) IUTF8->UTF8Printf((codeset_page), (utf8_fmt), (...))
#define UTF8Remove(UTF8, start, len, mem_flags) IUTF8->UTF8Remove((UTF8), (start), (len), (mem_flags))
#define UTF8Right(UTF8, len, mem_flags) IUTF8->UTF8Right((UTF8), (len), (mem_flags))
#define UTF8SetGlyph(glyph, data) IUTF8->UTF8SetGlyph((glyph), (data))
#define UTF8SubString(UTF8, start, len, mem_flags) IUTF8->UTF8SubString((UTF8), (start), (len), (mem_flags))
#define UTF8ToLower(alphabet_UTF8, UTF8, mem_flags) IUTF8->UTF8ToLower((alphabet_UTF8), (UTF8), (mem_flags))
#define UTF8ToUpper(alphabet_UTF8, UTF8, mem_flags) IUTF8->UTF8ToUpper((alphabet_UTF8), (UTF8), (mem_flags))
#define UTF8Trim(UTF8, mem_flags) IUTF8->UTF8Trim((UTF8), (mem_flags))
#define UTF8TextExtent(ofont, font_size, UTF8, ext) IUTF8->UTF8TextExtent((ofont), (font_size), (UTF8), (ext))
#define UTF8TextExtentN(ofont, font_size, UTF8, n, ext) IUTF8->UTF8TextExtentN((ofont), (font_size), (UTF8), (n), (ext))
#define UTF8TextLength(ofont, font_size, UTF8) IUTF8->UTF8TextLength((ofont), (font_size), (UTF8))
#define UTF8TextLengthN(ofont, font_size, UTF8, n) IUTF8->UTF8TextLengthN((ofont), (font_size), (UTF8), (n))
#define UTF8Text(rp, ofont, font_size, xpos, ypos, UTF8) IUTF8->UTF8Text((rp), (ofont), (font_size), (xpos), (ypos), (UTF8))
#define UTF8TextN(rp, ofont, font_size, xpos, ypos, UTF8, n) IUTF8->UTF8TextN((rp), (ofont), (font_size), (xpos), (ypos), (UTF8), (n))
#define UTF32Text(rp, ofont, font_size, xpos, ypos, UTF32) IUTF8->UTF32Text((rp), (ofont), (font_size), (xpos), (ypos), (UTF32))

#endif /* INLINE4_UTF8_H */
